package main

import (
	"fmt"
	"io/ioutil"
	"strings"
	"sjson"
	"gjson"
	"time"
	"math"
)


func GetSliceOfDatesForDefectDuration(j []string) {

	for _,v := range j {
		s := ConvertToDateTime(gjson.Get(v,"startDate").String())
		e := ConvertToDateTime(gjson.Get(v,"endDate").String())

		fmt.Println("Start datetime:", s)
		fmt.Println("End datetime", e)
	}

}

func CalcTotalMinsInDefectDuration(j []string) {

	for _,v := range j {

		s := gjson.Get(v, "startDate").String()
		y1 := ConvertToDateTime(s)
		fmt.Println("Start time:", y1)
		fmt.Println("Day of week", y1.Weekday())

		e := gjson.Get(v,"endDate").String()
		y2 := ConvertToDateTime(e)
		fmt.Println("End time:", y2)
		fmt.Println("Day of week", y2.Weekday())

		mins := y2.Sub(y1).Minutes()
		minsRounded := math.Floor(mins*100) / 100
		if minsRounded < 1 { minsRounded = 00.00 }

		hours := minsRounded / 60
		hoursRounded := math.Floor(hours*100) / 100
		if hoursRounded < 1 { hoursRounded = 00.00 }

		days := hoursRounded / 24
		daysRounded := math.Floor(days*100) / 100
		if daysRounded < 1 { daysRounded = 00.00 }

		fmt.Println("Minutes:", minsRounded)
		fmt.Println("Hours:", hoursRounded)
		fmt.Println("Days:", daysRounded)
		fmt.Println("-----------------------")

	}

}

func ConvertToDateTime(d string) time.Time {

	layout := "02/01/2006 15:04:05"
	t,_ := time.Parse(layout,d)
	return t

}

func SlurpFileIntoStringSlice(f,s string) []string {

	// Reset the slice
	var csvDataSlice []string

	// File reader
	d,e := ioutil.ReadFile(f)

	// Check errors
	Check(e)

	// Convert slurp into a big string
	dd := string(d)

	// Split the big string on the splitter chars supplied
	t := strings.Split(dd,s)

	// Push the lines into the slice
	for _,v := range t {
		csvDataSlice = append(csvDataSlice,v)
	}

	// return the new slice
	return csvDataSlice
}

func ProcessSlice(s []string) []string {

	jsonSlice = nil

	for _,l := range s {

		lineData := strings.Split(l,",")

		defectId 		:= lineData[0]
		summary  		:= lineData[1]
		status 			:= lineData[2]
		detectedDate	:= lineData[3]
		severity		:= lineData[4]
		closeDate		:= lineData[5]
		rootCause		:= lineData[6]
		startDate		:= lineData[7]
		endDate			:= lineData[8]


		j := "{}"

		summary = CheckForNull(summary)
		j,e := sjson.Set(j,"summary", strings.ToLower(summary))
		Check(e)

		status = CheckForNull(status)
		j,e = sjson.Set(j,"status", strings.ToLower(status))
		Check(e)

		detectedDate = CheckForNull(detectedDate)
		j,e = sjson.Set(j,"detectedDate", strings.ToLower(detectedDate))
		Check(e)

		severity = CheckForNull(severity)
		j,e = sjson.Set(j,"severity", strings.ToLower(severity))
		Check(e)

		closeDate = CheckForNull(closeDate)
		j,e = sjson.Set(j,"closeDate", strings.ToLower(closeDate))
		Check(e)

		rootCause = CheckForNull(rootCause)
		j,e = sjson.Set(j,"rootCause", strings.ToLower(rootCause))
		Check(e)

		defectId = CheckForNull(defectId)
		j, e = sjson.Set(j, "defectId", strings.ToLower(defectId))
		Check(e)

		endDate = CheckForNull(endDate)
		j,e = sjson.Set(j,"endDate", strings.ToLower(endDate))
		Check(e)

		startDate = CheckForNull(startDate)
		j,e = sjson.Set(j,"startDate", strings.ToLower(startDate))
		Check(e)

		jsonSlice = append(jsonSlice,j)

	}

	return jsonSlice

}

func CheckForNull(s string) string {
	if s == "" { s = "nil" }
	return s
}

func Out(s string) { fmt.Println(s) }

func OutSlice(s []string) {
	for i,v := range s {
		fmt.Println("Index:",i,"Value:",v)
	}
}

func Check(e error) { if e != nil { fmt.Println("ERROR: ",e) } }
